
import pygame
import random
import sys
import os
if hasattr(sys, '_MEIPASS'):
    font_path = os.path.join(sys._MEIPASS, "freesansbold.ttf")
else:
    font_path = 'freesansbold.ttf'
    
BLUE = (0, 0, 255)
RED = (255, 0, 0)
win_h = 600
win_w = 600
screen = pygame.display.set_mode((win_w, win_h))
background = pygame.image.load('first_path.png')
pygame.display.set_caption('Lancer')
pygame.init()

class Lancer1(pygame.sprite.Sprite):
    def __init__(self,width,height, ammo):
        super().__init__()
        self.width = width
        self.height = height
        self.health = 100
        self.ammo = 5
        self.max_ammo = 5
        self.damage = 100
        self.image = pygame.image.load('imageedit_1_7559225550.png')
        self.image.convert_alpha()
        self.rect = self.image.get_rect()
        self.rect.x = 0
        self.rect.y = 600 // 2
        self.reload_delay = 1000
        self.shoot_delay = 400
        self.last_shot = 0
        self.sound = pygame.mixer.Sound('Hackathon_project.wav')
    def draw(self, surface):
        surface.blit(self.image, (self.rect.x, self.rect.y))
    def restart_ammo(self):
        if show_death_message == True:
            self.ammo = 5
    def play_sound(self):
        self.sound.play()
    def reload(self):
        if self.ammo == 0:
           current_time = pygame.time.get_ticks()
           if current_time - self.last_shot > self.reload_delay:
               self.last_shot = current_time
               self.ammo = 5
   
    def handle_movement_keys(self):
        if lancer1_alive == True:
            key = pygame.key.get_pressed()
            dist = 3
            if key[pygame.K_s]: 
                self.rect.y += dist 
            elif key[pygame.K_w]:
                self.rect.y -= dist 
            if key[pygame.K_d]: 
                self.rect.x += dist 
            elif key[pygame.K_a]: 
                self.rect.x -= dist 

            if self.rect.x > win_w - 10:
                self.rect.x = win_w - 10
            if self.rect.x < 0:
                self.rect.x = 0
            if self.rect.y < 0:
                self.rect.y = 0
            if self.rect.y > win_h - 10:
                self.rect.y = win_h - 10

            if key[pygame.K_LALT]:
                if self.ammo > 0:
                    current_time = pygame.time.get_ticks()
                    if current_time - self.last_shot > self.shoot_delay:
                       self.last_shot = current_time
                       projectile = Projectile()
                       projectile.rect.x = self.rect.x
                       projectile.rect.y = self.rect.y
                       projectile1.add(projectile)
                       self.ammo -= 1
                      


class Enemy(pygame.sprite.Sprite):
    def __init__(self, height, width, image,):
        super().__init__()
        self.width = width
        self.height = height
        self.health = 100
        self.max_ammo = 10
        self.ammo = self.max_ammo
        self.damage = 100
        self.image = pygame.image.load(image)
        self.rect = self.image.get_rect()
        self.rect.x = 400
        self.rect.y = 400 // 2
        self.reload_delay = 4000
        self.shoot_delay = 400
        self.last_shot = 0
        self.last_movement = 0
        self.move_delay = 20
    def draw(self, surface):
        surface.blit(self.image, (self.rect.x, self.rect.y))
    def restart_ammo(self):
        if show_death_message == True:
            self.ammo = 10
    def reload(self):
        if self.ammo == 0:
           current_time = pygame.time.get_ticks()
           if current_time - self.last_shot > self.reload_delay:
               self.last_shot = current_time
               self.ammo = 10
               
    def fire(self):
        if self.ammo > 0:
            current_time = pygame.time.get_ticks()
            if current_time - self.last_shot > self.shoot_delay:
                projectile = Projectile()
                projectile.rect.x = self.rect.x
                projectile.rect.y = self.rect.y
                projectile2.add(projectile)
                self.ammo -= 1

    def pos_towards_player(self):
        if lancer1.rect.y > self.rect.y:
            current_time = pygame.time.get_ticks()
            if current_time - self.last_movement > self.move_delay:
                self.last_movement = current_time
                chance = random.randint(1, 3)
                if chance == 1:
                    self.rect.y += random.randint(1, 3)

        if lancer1.rect.y < self.rect.y:
            current_time = pygame.time.get_ticks()
            if current_time - self.last_movement > self.move_delay:
                self.last_movement = current_time
                chance = random.randint(1, 3)
                if chance == 1:
                    self.rect.y -= random.randint(1, 3)
          
            

        if lancer1.rect.x > self.rect.x:
            current_time = pygame.time.get_ticks()
            if current_time - self.last_movement > self.move_delay:
                self.last_movement = current_time 
                chance = random.randint(1, 3)
                if chance == 1:
                    self.rect.x += random.randint(1, 30)

        if lancer1.rect.x < self.rect.x:
            current_time = pygame.time.get_ticks()
            if current_time - self.last_movement > self.move_delay:
                self.last_movement = current_time
                chance = random.randint(1, 3)
                if chance == 1:
                    self.rect.x -= random.randint(1, 3)

            
   
            

class Projectile(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface([7, 5])
        self.image.fill((255, 255, 255))
        self.rect = self.image.get_rect()
        

    def draw(self, surface):
       surface.blit(self.image, (self.rect.x, self.rect.y))

class Cover(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface([20, 30])
        self.image.fill((0, 255, 0))
        self.rect = self.image.get_rect()
    def draw(self):
        surface.blit(self.image, (self.rect.x, self.rect.y))

def draw_text(surface, text, size, x, y, color):
    '''draw text to screen'''
    font = pygame.font.Font(font_path, size)
    text_surface = font.render(text, True, color)
    text_rect = text_surface.get_rect()
    text_rect.midtop = (x, y)
    surface.blit(text_surface, text_rect)
battles_done = False
player_wins = 0
enemy_wins = 0
def win_counters():
    draw_text(screen, str(player_wins), 20, 280, 10, BLUE)
    draw_text(screen, str(enemy_wins), 20, 320, 10, BLUE)
def ammo_counters():
    draw_text(screen, str(lancer1.ammo), 20, 10, 10, BLUE)
    draw_text(screen, str(enemy.ammo), 20, 580, 10, RED)

def health_counters():
    draw_text(screen, str(lancer1.health), 20, 15, 30, BLUE)
    draw_text(screen, str(enemy.health), 20, 580, 30, RED)
    

def menu():
    draw_text(screen, "PRESS [ENTER] TO BEGIN", 20, win_w/2, win_h/2, RED)
    pygame.display.update()

    while True:
        event = pygame.event.poll()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RETURN:
                break
        elif event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

def death_message():
    draw_text(screen,  loser + " was defeated", 20, win_w/2, win_h/2, RED)
    pygame.display.update()

    while True:
        event = pygame.event.poll()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RETURN:
                break
            
        elif event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

def win_message():
    draw_text(screen, winer + " has won the battle!", 20, win_w/2, win_h/2, RED)
    pygame.display.update()

    while True:
        event = pygame.event.poll()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RETURN:
                break

        elif event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        
lancer1 = Lancer1(10, 10, 5)
enemy = Enemy(10, 10,'slime.png')
projectile1 = pygame.sprite.Group()
projectile2 = pygame.sprite.Group()
lancer1_list = pygame.sprite.Group()
enemy_list = pygame.sprite.Group()
cover_list = pygame.sprite.Group()
def init_lancers():
    lancer1_list.add(lancer1)
    lancer1.image = pygame.image.load('imageedit_1_7559225550.png')
    lancer1.rect.x = 0
    lancer1.rect.y = 400 // 2
    enemy_list.add(enemy)
    enemy.image = pygame.image.load('slime.png')
    enemy.rect.x = 400
    enemy.rect.y = 400 // 2
    
    
def init_cover():
    for i in range(5):
        cover = Cover()
        cover.rect.x = random.randrange(win_w)
        cover.rect.y = random.randrange(win_h)
        cover_list.add(cover)

def clear_screen():
    for cover in cover_list:
         cover.image.fill((0, 0, 0))
         cover_list.remove(cover)
    for projectile in projectile1:
        projectile.image.fill((0, 0, 0))
        projectile1.remove(projectile)
    for projectile in projectile2:
        projectile.image.fill((0, 0, 0))
        projectile2.remove(projectile)
    for lancer1 in lancer1_list:
        lancer1.image.fill((0, 0, 0))
        lancer1_list.remove(lancer1)
    for enemy in enemy_list:
        enemy.image.fill((0, 0, 0))
        enemy_list.remove(enemy)
    
   

lancer1_alive = True
enemy_alive = True
clock = pygame.time.Clock()
show_menu = True
show_death_message = False
show_win_message = False
loser = 0
running = True
while running:
    if show_menu == True:
        menu()
        init_lancers()
        lancer1_alive = True
        enemy_alive = True
        init_cover()
        show_menu = False
   
    if show_death_message == True:
        clear_screen()
        lancer1.restart_ammo()
        enemy.restart_ammo()
        lancer1.health = 100
        enemy.health = 100
        death_message()
        show_death_message = False
        show_menu = True

    if show_win_message == True:
        clear_screen()
        lancer1.restart_ammo()
        enemy.restart_ammo()
        lancer1.health = 100
        enemy.health = 100
        win_message()
        player_wins = 0
        enemy_wins = 0
        show_win_message = False
        show_menu = True

    for event in pygame.event.get():
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit() 
                running = False 

    
    for enemy in enemy_list:
        enemy.pos_towards_player()
        if lancer1.rect.y == enemy.rect.y:
            enemy.fire()
        if lancer1.rect.y + 20 == enemy.rect.y:
            enemy.fire()
    

    for projectile in projectile1:
            if projectile.rect.x  < 600 and projectile.rect.x + 10 > 0:
                projectile.rect.x += 12
            if projectile.rect.x < 0 + 10:
                projectile1.remove(projectile)
                
            enemy_hit_list = pygame.sprite.spritecollide(projectile, enemy_list, False)
            for enemy in enemy_hit_list:
                enemy.health -= lancer1.damage 
                projectile1.remove(projectile)
               
    for projectile in projectile2:
            if projectile.rect.x  < 600 and projectile.rect.x  > 0:
                projectile.rect.x -= 12
                
            lancer1_hit_list = pygame.sprite.spritecollide(projectile, lancer1_list, False)
            for lancer1 in lancer1_hit_list:
                lancer1.health -= enemy.damage
                projectile1.remove(projectile)
                

    for cover in cover_list:
        cover_hit_list = pygame.sprite.groupcollide(cover_list, projectile1, False, True)
        cover_hit_list2 = pygame.sprite.groupcollide(cover_list, projectile2, False, True)

    if lancer1.health <= 0:
        lancer1.image = pygame.image.load('grave.png')
        lancer1_alive = False
        loser = 'The Player'
        enemy_wins += 1
        show_death_message = True
    elif enemy.health <= 0:
        enemy.image = pygame.image.load('grave.png')
        lancer2_alive = False
        loser = 'The Enemy'
        player_wins += 1
        show_death_message = True

    if enemy_wins == 2:
        show_death_message = False
        winer = 'The Enemy'
        show_win_message = True
    elif player_wins == 2:
        show_death_message = False
        winer = 'The Player'
        show_win_message = True
        
    lancer1.play_sound()
    screen.fill((0,0,0))
    screen.blit(background,(0, 0))
    ammo_counters()
    health_counters()
    win_counters()
    lancer1.draw(screen)
    enemy.draw(screen)
    lancer1.reload()
    enemy.reload()
    enemy.pos_towards_player()
    lancer1.handle_movement_keys()
    projectile1.draw(screen)
    projectile2.draw(screen)
    cover_list.draw(screen)
    pygame.display.flip()
   
    clock.tick(60)


