import pygame
import random
import sys
import os
if hasattr(sys, '_MEIPASS'):
    font_path = os.path.join(sys._MEIPASS, "freesansbold.ttf")
else:
    font_path = 'freesansbold.ttf'
    
BLUE = (0, 0, 255)
RED = (255, 0, 0)
win_h = 400
win_w = 400
screen = pygame.display.set_mode((win_w, win_h))
pygame.display.set_caption('Lancer')
pygame.init()
ammo = 5
class Lancer1(pygame.sprite.Sprite):
    def __init__(self,width,height):
        super().__init__()
        self.width = width
        self.height = height
        self.health = 100
        self.ammo = ammo
        self.damage = 100
        self.image = pygame.Surface([10, 10])
        self.image.fill(BLUE)
        self.rect = self.image.get_rect()
        self.rect.x = 0
        self.rect.y = 400 // 2
        self.reload_delay = 4000
        self.shoot_delay = 400
        self.last_shot = 0
    def draw(self, surface):
        surface.blit(self.image, (self.rect.x, self.rect.y))
    def restart_ammo(self):
        if show_death_message == True:
            self.ammo = ammo
    def reload(self):
        if self.ammo == 0:
           current_time = pygame.time.get_ticks()
           if current_time - self.last_shot > self.reload_delay:
               self.last_shot = current_time
               self.ammo = ammo
    def change_weapon(self):
        global ammo
        key = pygame.key.get_pressed()
        if key[pygame.K_1]:
            self.ammo = 10
            self.reload_delay = 2000
            self.shoot_delay = 1000
            self.damage = 50
        if key[pygame.K_2]:
            self.ammo = 50
            self.reload_delay = 4000
            self.shoot_delay = 50
            self.damage = 20
        if key[pygame.K_3]:
           self.ammo = 5
           self.reload_delay = 4000
           self.shoot_delay = 400
           self.damage = 100
        if key[pygame.K_4]:
            self.ammo = 100
            self.reload_delay = 10000
            self.shoot_delay = 0
            self.damage = 10
    def handle_movement_keys(self):
        if lancer1_alive == True:
            key = pygame.key.get_pressed()
            dist = 2 
            if key[pygame.K_s]: 
                self.rect.y += dist 
            elif key[pygame.K_w]:
                self.rect.y -= dist 
            if key[pygame.K_d]: 
                self.rect.x += dist 
            elif key[pygame.K_a]: 
                self.rect.x -= dist 

            if self.rect.x > win_w - 10:
                self.rect.x = win_w - 10
            if self.rect.x < 0:
                self.rect.x = 0
            if self.rect.y < 0:
                self.rect.y = 0
            if self.rect.y > win_h - 10:
                self.rect.y = win_h - 10

            if key[pygame.K_LALT]:
                if self.ammo > 0:
                    current_time = pygame.time.get_ticks()
                    if current_time - self.last_shot > self.shoot_delay:
                       self.last_shot = current_time
                       projectile = Projectile()
                       projectile.rect.x = lancer1.rect.x
                       projectile.rect.y = lancer1.rect.y
                       projectile1.add(projectile)
                       self.ammo -= 1
                      


class Lancer2(pygame.sprite.Sprite):
    def __init__(self, height, width):
        super().__init__()
        self.width = width
        self.height = height
        self.health = 100
        self.ammo = ammo
        self.damage = 100
        self.image = pygame.Surface([10, 10])
        self.image.fill(RED)
        self.rect = self.image.get_rect()
        self.rect.x = 400
        self.rect.y = 400 // 2
        self.reload_delay = 4000
        self.shoot_delay = 400
        self.last_shot = 0
    def draw(self, surface):
        surface.blit(self.image, (self.rect.x, self.rect.y))
    def restart_ammo(self):
        if show_death_message == True:
            self.ammo = ammo
    def reload(self):
        if self.ammo == 0:
           current_time = pygame.time.get_ticks()
           if current_time - self.last_shot > self.reload_delay:
               self.last_shot = current_time
               self.ammo = ammo
                 
    def change_weapon(self):
        global ammo
        key = pygame.key.get_pressed()
        if key[pygame.K_1]:
            self.ammo = 10
            self.reload_delay = 2000
            self.shoot_delay = 1000
            ammo = 10
            self.damage = 50
        if key[pygame.K_2]:
            self.ammo = 50
            self.reload_delay = 4000
            self.shoot_delay = 50
            ammo = 50
            self.damage = 20
        if key[pygame.K_3]:
           self.ammo = 5
           self.reload_delay = 4000
           self.shoot_delay = 400
           ammo = 5
           self.damage = 100
        if key[pygame.K_4]:
            self.ammo = 100
            self.reload_delay = 10000
            self.shoot_delay = 0
            self.damage = 10
 
            

    def handle_movement_keys(self):
        if lancer2_alive == True:
            key = pygame.key.get_pressed()
            dist = 2 
            if key[pygame.K_DOWN]: 
                self.rect.y += dist 
            elif key[pygame.K_UP]:
                self.rect.y -= dist 
            if key[pygame.K_RIGHT]: 
                self.rect.x += dist 
            elif key[pygame.K_LEFT]: 
                self.rect.x -= dist 

            if self.rect.x > win_w - 10:
                self.rect.x = win_w - 10
            if self.rect.x < 0:
                self.rect.x = 0
            if self.rect.y < 0:
                self.rect.y = 0
            if self.rect.y > win_h - 10:
                self.rect.y = win_h - 10

            if key[pygame.K_SPACE]:
                if self.ammo > 0:
                    current_time = pygame.time.get_ticks()
                    if current_time - self.last_shot > self.shoot_delay:
                        self.last_shot = current_time
                        projectile = Projectile()
                        projectile.rect.x = lancer2.rect.x
                        projectile.rect.y = lancer2.rect.y
                        projectile2.add(projectile)
                        self.ammo -= 1
        else:
            pass

class Projectile(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface([5, 2])
        self.image.fill((255, 255, 255))
        self.rect = self.image.get_rect()
        

    def draw(self, surface):
       surface.blit(self.image, (self.rect.x, self.rect.y))

class Cover(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface([10, 20])
        self.image.fill((0, 255, 0))
        self.rect = self.image.get_rect()
    def draw(self):
        surface.blit(self.image, (self.rect.x, self.rect.y))

def draw_text(surface, text, size, x, y, color):
    '''draw text to screen'''
    font = pygame.font.Font(font_path, size)
    text_surface = font.render(text, True, color)
    text_rect = text_surface.get_rect()
    text_rect.midtop = (x, y)
    surface.blit(text_surface, text_rect)

def ammo_counters():
    draw_text(screen, str(lancer1.ammo), 20, 10, 10, BLUE)
    draw_text(screen, str(lancer2.ammo), 20, 350, 10, RED)

def health_counters():
    draw_text(screen, str(lancer1.health), 20, 15, 30, BLUE)
    draw_text(screen, str(lancer2.health), 20, 350, 30, RED)
    

def menu():
    draw_text(screen, "PRESS [ENTER] TO BEGIN", 20, win_w/2, win_h/2, RED)
    draw_text(screen, "PRESS [Q] TO QUIT", 20, win_w/2, (win_h/2) + 25, RED)
    draw_text(screen, "LANCER", 50, win_w/2, (win_h/2) - 100, RED)
    pygame.display.update()

    while True:
        event = pygame.event.poll()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RETURN:
                break
            if event.key == pygame.K_o:
                global show_option_screen
                show_option_screen = True
                break
            if event.key == pygame.K_i:
                global show_directions_screen
                show_directions_screen = True
                break
            elif event.key == pygame.K_q:
                pygame.quit()
                sys.exit()
        elif event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

def death_message():
    draw_text(screen, "player " + loser + " was killed", 20, win_w/2, win_h/2, RED)
    pygame.display.update()

    while True:
        event = pygame.event.poll()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RETURN:
                break
            if event.key == pygame.K_o:
                global show_option_screen
                show_option_screen = True
                break
            if event.key == pygame.K_i:
                global show_directions_screen
                show_directions_screen = True
                break
            elif event.key == pygame.K_q:
                pygame.quit()
                sys.exit()
        elif event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        
lancer1 = Lancer1(10, 10)
lancer2 = Lancer2(10, 10)
projectile1 = pygame.sprite.Group()
projectile2 = pygame.sprite.Group()
lancer1_list = pygame.sprite.Group()
lancer2_list = pygame.sprite.Group()
cover_list = pygame.sprite.Group()
def init_lancers():
    lancer1_list.add(lancer1)
    lancer1.image.fill(BLUE)
    lancer1.rect.x = 0
    lancer1.rect.y = 400 // 2
    lancer2_list.add(lancer2)
    lancer2.rect.x = 400
    lancer2.rect.y = 400 // 2
    lancer2.image.fill(RED)
    
def init_cover():
    for i in range(20):
        cover = Cover()
        cover.rect.x = random.randrange(win_w)
        cover.rect.y = random.randrange(win_h)
        cover_list.add(cover)

def clear_screen():
    for cover in cover_list:
         cover.image.fill((0, 0, 0))
         cover_list.remove(cover)
    for projectile in projectile1:
        projectile.image.fill((0, 0, 0))
        projectile1.remove(projectile)
    for projectile in projectile2:
        projectile.image.fill((0, 0, 0))
        projectile2.remove(projectile)
    for lancer1 in lancer1_list:
        lancer1.image.fill((0, 0, 0))
        lancer1_list.remove(lancer1)
    for lancer2 in lancer2_list:
        lancer2.image.fill((0, 0, 0))
        lancer2_list.remove(lancer2)
    
   

lancer1_alive = True
lancer2_alive = True
clock = pygame.time.Clock()
show_menu = True
show_death_message = False
loser = 0
running = True
while running:
    if show_menu == True:
        menu()
        init_lancers()
        lancer1_alive = True
        lancer2_alive = True
        init_cover()
        show_menu = False
   
    if show_death_message == True:
        clear_screen()
        lancer1.restart_ammo()
        lancer2.restart_ammo()
        lancer1.health = 100
        lancer2.health = 100
        death_message()
        show_death_message = False
        show_menu = True

    for event in pygame.event.get():
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit() 
                running = False

    for projectile in projectile1:
            if projectile.rect.x  < 400 and projectile.rect.x + 10 > 0:
                projectile.rect.x += 12
            if projectile.rect.x < 0 + 10:
                projectile1.remove(projectile)
                
            lancer2_hit_list = pygame.sprite.spritecollide(projectile, lancer2_list, False)
            for lancer2 in lancer2_hit_list:
                lancer2.health -= lancer1.damage 
                projectile1.remove(projectile)
               
    for projectile in projectile2:
            if projectile.rect.x  < 400 and projectile.rect.x  > 0:
                projectile.rect.x -= 12
                
            lancer1_hit_list = pygame.sprite.spritecollide(projectile, lancer1_list, False)
            for lancer1 in lancer1_hit_list:
                lancer1.health -= lancer2.damage
                projectile1.remove(projectile)
                

    for cover in cover_list:
        cover_hit_list = pygame.sprite.groupcollide(cover_list, projectile1, False, True)
        cover_hit_list2 = pygame.sprite.groupcollide(cover_list, projectile2, False, True)

    if lancer1.health <= 0:
        lancer1.image.fill((0, 0, 0))
        lancer1_alive = False
        loser = '1'
        show_death_message = True
    elif lancer2.health <= 0:
        lancer2.image.fill((0, 0, 0))
        lancer2_alive = False
        loser = '2'
        show_death_message = True
        
    
    screen.fill((0,0,0))
    ammo_counters()
    health_counters()
    lancer1.draw(screen)
    lancer2.draw(screen)
    lancer1.reload()
    lancer2.reload()
    lancer1.change_weapon()
    lancer2.change_weapon()
    lancer2.handle_movement_keys()
    lancer1.handle_movement_keys()
    projectile1.draw(screen)
    projectile2.draw(screen)
    cover_list.draw(screen)
    pygame.display.flip()
   
    clock.tick(60)


